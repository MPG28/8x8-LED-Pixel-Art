/* Arduino 256 RGB LEDs Matrix Animation Frame 
 * Using WS2812 LED Strips
 

This code is in the public domain...

You can: copy it, use it, modify it, share it or just plain ignore it!
Thx!

*/

#include <avr/pgmspace.h>  // Needed to store stuff in Flash using PROGMEM
#include "FastLED.h"      
#define NUM_LEDS 64
#define DATA_PIN 9  
CRGB leds[NUM_LEDS];

#define FRAMES_PER_SECOND  120 //screensaver

// Create the array of retro arcade characters and store it in Flash memory
const long Spaceship1[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x00ff00, 0x000000, 0x00ff00, 0x00ff00, 0x00ff00, 0x000000, 0x00ff00, 
0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x000000, 
0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x00ff00, 0x000000, 0x00ff00, 0x00ff00, 
0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000
};

const long Spaceship2[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x00ff00, 0x000000, 0x000000, 
0x00ff00, 0x000000, 0x00ff00, 0x00ff00, 0x00ff00, 0x000000, 0x00ff00, 0x000000, 
0x000000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 
0x00ff00, 0x00ff00, 0x000000, 0x00ff00, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 
0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00 
};


const long Bang0[] PROGMEM =
{
0x000000, 0x000001, 0x010001, 0x010001, 0x010100, 0x010101, 0x000100, 0x000101, 
0x010100, 0x000101, 0xd50101, 0x010100, 0x010101, 0x010001, 0x010000, 0x010100, 
0x000100, 0x010001, 0xd50100, 0x000000, 0xfeeb3a, 0x010100, 0x010001, 0x010101, 
0x010101, 0x010101, 0xffea3a, 0xfffffe, 0xffea3b, 0x000101, 0x000001, 0x010101, 
0x000100, 0x010000, 0x000000, 0x010100, 0xfeeb3b, 0x000100, 0x000100, 0x010000, 
0x000101, 0x000001, 0x010001, 0x010101, 0x010000, 0x000101, 0x000000, 0x000001, 
0x010100, 0x010101, 0x000001, 0x010000, 0x010100, 0x000100, 0x010000, 0x010000, 
0x010000, 0x000001, 0x010001, 0x010101, 0x000001, 0x000001, 0x000101, 0x010001
};


const long Bang1[] PROGMEM =
{
0x000000, 0x000000, 0xff1f1f, 0x000000, 0x000000, 0x000000, 0x000000, 0xff1f1f, 
0x000000, 0xf9d042, 0xf9d042, 0x000000, 0xf9d042, 0x000000, 0x000000, 0xff1f1f, 
0x000000, 0xf9d042, 0xf9d042, 0xf9d042, 0xf9d042, 0xf9d042, 0x000000, 0x000000, 
0xf9d042, 0xf9d042, 0xf9d042, 0x000000, 0x000000, 0xf9d042, 0x000000, 0xff1f1f, 
0x000000, 0x000000, 0xf9d042, 0xf9d042, 0xf9d042, 0xf9d042, 0x000000, 0x000000, 
0xff1f1f, 0xff1f1f, 0x000000, 0xf9d042, 0x000000, 0x000000, 0xff1f1f, 0x000000, 
0xff1f1f, 0xff1f1f, 0x000000, 0xff1f1f, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long Bang2[] PROGMEM =
{
0x010001, 0x010001, 0xf9d043, 0x010100, 0x010101, 0xd50000, 0x010101, 0xf9d143, 
0x000000, 0xd40001, 0x000001, 0x010100, 0x010001, 0x010101, 0x000100, 0x000101, 
0x000000, 0x010100, 0x010101, 0x000101, 0x010101, 0x010101, 0x010101, 0x010100, 
0xd50100, 0x010000, 0x010001, 0x000101, 0x000100, 0x010101, 0x000101, 0xf8d043, 
0x000000, 0x000101, 0x010101, 0x010101, 0x050100, 0x000001, 0x010000, 0x010100, 
0x000100, 0x000000, 0x010000, 0x000101, 0x010100, 0x000100, 0xd50001, 0x000001, 
0xf9d043, 0x000001, 0xd50000, 0x010100, 0x010000, 0x000101, 0xd50100, 0x010001, 
0x000100, 0x010000, 0x000001, 0xf8d043, 0x010101, 0x010100, 0x000100, 0x010001
};

const long Number0[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 0x000000
};

const long Number1[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 0x000000
};

const long Number2[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x000000, 0x000000
};

const long Number3[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 0x00ff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x00ff00, 0x00ff00, 0x000000, 0x000000, 0x000000
};

const long Z1[] PROGMEM =
{
0x000000, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x000000, 0x7da269, 
0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0x000000, 
0x000000, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x328dfd, 0x328dfd, 
0x328dfd, 0x328dfd, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x000000, 
0x000000, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 
0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x000000, 0x000000, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x000000, 0x7da269, 0x7da269
};

const long Z2[] PROGMEM =
{
0x7da269, 0x000000, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x000000, 0x000000, 
0x000000, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 
0x328dfd, 0x328dfd, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x000000, 
0x000000, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x328dfd, 0x328dfd, 
0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0x000000, 
0x000000, 0x000000, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 
0x7da269, 0x7da269, 0x000000, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x638596, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269
};

const long Z3[] PROGMEM =
{
0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0x000000, 
0x000000, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x328dfd, 0x328dfd, 
0x328dfd, 0x328dfd, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x000000, 
0x000000, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 
0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x000000, 0x000000, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x000000, 0x7da269, 0x7da269, 
0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x000000, 0x638596, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269
};

const long Z4[] PROGMEM =
{
0x328dfd, 0x328dfd, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x000000, 
0x000000, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x328dfd, 0x328dfd, 
0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0x000000, 
0x000000, 0x000000, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 
0x7da269, 0x7da269, 0x000000, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x638596, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 
0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x000000, 0x638596, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x000000, 0x000000, 0x7da269
};

const long Z5[] PROGMEM =
{
0x328dfd, 0x328dfd, 0xf0f0f0, 0xfd3232, 0xfd3232, 0xfd3232, 0xf0f0f0, 0x000000, 
0x000000, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 0xf0f0f0, 
0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x000000, 0x000000, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x000000, 0x7da269, 0x7da269, 
0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x000000, 0x638596, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 
0x7da269, 0x000000, 0x000000, 0x000000, 0x7da269, 0x7da269, 0x000000, 0x638596, 
0x638596, 0x000000, 0x7da269, 0x7da269, 0x7da269, 0x7da269, 0x5e7253, 0x7da269
};

const long pacman1[] PROGMEM =
{
0x2097f3, 0x2096f2, 0xfec106, 0xfec106, 0xffc007, 0xffc107, 0x2097f2, 0x2196f3, 
0x2096f2, 0xfec006, 0xfec006, 0xfec007, 0xfec007, 0xffc007, 0xfec007, 0x2196f3, 
0xfec007, 0xffc107, 0xffc107, 0xffc007, 0x010000, 0xfec006, 0xffc007, 0xfec107, 
0x2096f2, 0x2197f3, 0x2196f3, 0xfec107, 0xfec006, 0xfec007, 0xfec006, 0xfec006, 
0xffc006, 0xffc107, 0xfec007, 0xffc106, 0x2197f2, 0x2197f2, 0x2196f2, 0x2197f3, 
0x2096f2, 0x2096f3, 0xffc107, 0xffc107, 0xffc006, 0xfec107, 0xfec106, 0xffc107, 
0x2197f2, 0xffc107, 0xffc107, 0xffc106, 0xffc006, 0xffc106, 0xfec107, 0x2097f2, 
0x2096f2, 0x2096f2, 0xffc106, 0xfec107, 0xfec106, 0xffc107, 0x2197f2, 0x2097f2
};

const long pacman2[] PROGMEM =
{
0x2197f3, 0x2196f2, 0xffc006, 0xfec006, 0xfec007, 0xffc106, 0x2197f2, 0x2197f2, 
0x2197f3, 0xffc107, 0xfec007, 0xffc107, 0xfec106, 0xffc107, 0xffc107, 0x2096f3, 
0xfec007, 0xffc007, 0xfec006, 0xfec007, 0x000101, 0xffc007, 0xfec006, 0x2097f3, 
0xfec106, 0xffc106, 0xfec007, 0xffc106, 0xffc007, 0xffc007, 0xffc107, 0xfec006, 
0xffc007, 0xffc006, 0xffc107, 0xffc106, 0xffc106, 0xffc107, 0xffc107, 0xffc006, 
0x2097f3, 0xfec107, 0xfec006, 0xfec106, 0xfec106, 0xffc006, 0xfec107, 0xfec006, 
0x2197f2, 0xfec006, 0xfec107, 0xffc007, 0xfec107, 0xfec007, 0xfec007, 0x2096f2, 
0x2096f2, 0x2196f3, 0x2197f2, 0xffc106, 0xfec107, 0xffc106, 0x2196f3, 0x2196f2
};

const long ghost1[] PROGMEM =
{
0x000101, 0xff0000, 0xfe0000, 0xfe0000, 0xfe0101, 0xff0000, 0xff0100, 0x000101, 
0xfe0100, 0xff0000, 0xfffeff, 0xfffffe, 0xfe0000, 0xff0101, 0xfffefe, 0xfffefe, 
0x2196f2, 0x2197f2, 0xfeffff, 0xfe0101, 0x2097f2, 0x2196f3, 0xfeffff, 0xff0001, 
0xfe0000, 0xfffefe, 0x2096f3, 0x2097f2, 0xfe0001, 0xfefffe, 0x2097f2, 0x2197f3, 
0xff0000, 0xfe0100, 0xff0001, 0xff0100, 0xfe0100, 0xfe0000, 0xff0100, 0xfe0101, 
0xff0101, 0xff0101, 0xfe0101, 0xfe0101, 0xff0000, 0xfe0001, 0xfe0000, 0xff0000, 
0xff0101, 0xfe0101, 0xff0001, 0xff0000, 0xff0101, 0xfe0000, 0xfe0001, 0xff0001, 
0x000100, 0xfe0101, 0x000101, 0xfe0101, 0x000100, 0xfe0001, 0x010001, 0xff0100
};

const long ghost2[] PROGMEM =
{
0x010001, 0xfe0001, 0xff0100, 0xfe0101, 0xfe0000, 0xfe0000, 0xfe0000, 0x000100, 
0xfe0100, 0xfe0000, 0xfefeff, 0xfefffe, 0xff0101, 0xfe0101, 0xfffefe, 0xfeffff, 
0x2196f3, 0x2197f3, 0xfffefe, 0xfe0001, 0x2097f2, 0x2196f3, 0xfeffff, 0xfe0100, 
0xff0001, 0xffffff, 0x2097f3, 0x2097f3, 0xfe0001, 0xffffff, 0x2196f3, 0x2096f2, 
0xfe0100, 0xff0101, 0xff0101, 0xff0001, 0xff0101, 0xfe0100, 0xff0101, 0xff0100, 
0xff0000, 0xff0000, 0xfe0101, 0xfe0100, 0xfe0101, 0xfe0001, 0xff0101, 0xff0100, 
0xff0100, 0xff0000, 0xfe0100, 0xfe0101, 0xfe0100, 0xff0101, 0xff0100, 0xff0100, 
0xfe0000, 0x010101, 0xfe0100, 0x000100, 0xfe0100, 0x010000, 0xfe0001, 0x000000
};

const long ghost3[] PROGMEM =
{
0x000000, 0x9c26b1, 0x9d27b0, 0x9c26b1, 0x9d26b0, 0x9d26b0, 0x9c26b0, 0x000001, 
0xffffff, 0xfefffe, 0x9c26b0, 0x9d27b0, 0xfffffe, 0xfffefe, 0x9d26b1, 0x9c26b1, 
0x9c27b0, 0xfffeff, 0x2197f2, 0x2096f3, 0x9d26b0, 0xfefffe, 0x2097f2, 0x2096f3, 
0x2197f3, 0x2197f3, 0xfffffe, 0x9c26b1, 0x2196f2, 0x2196f2, 0xfeffff, 0x9d26b0, 
0x9d26b1, 0x9d27b0, 0x9d27b0, 0x9c27b1, 0x9c27b0, 0x9d27b1, 0x9c26b0, 0x9c27b1, 
0x9c26b1, 0x9c26b1, 0x9c27b1, 0x9d26b1, 0x9c27b0, 0x9d26b0, 0x9d27b0, 0x9c26b0, 
0x9c27b0, 0x9c27b0, 0x9d27b1, 0x9c26b0, 0x9d26b0, 0x9c26b0, 0x9c26b0, 0x9d26b1, 
0x9c26b0, 0x010000, 0x9d26b0, 0x010001, 0x9c26b1, 0x010100, 0x9d27b1, 0x000101
};

const long ghost4[] PROGMEM =
{
0x000001, 0x9d27b0, 0x9c26b1, 0x9c26b0, 0x9c27b0, 0x9c26b0, 0x9c27b0, 0x000001, 
0xfefffe, 0xffffff, 0x9c27b0, 0x9c26b0, 0xfffefe, 0xfefeff, 0x9c26b0, 0x9d27b1, 
0x9c27b1, 0xfefffe, 0x2197f3, 0x2096f3, 0x9d27b1, 0xfefffe, 0x2197f3, 0x2197f3, 
0x2197f3, 0x2197f2, 0xfefeff, 0x9c27b0, 0x2097f3, 0x2097f3, 0xfeffff, 0x9d26b1, 
0x9d26b0, 0x9d26b0, 0x9c27b1, 0x9d26b1, 0x9c27b1, 0x9c27b1, 0x9c26b0, 0x9c26b1, 
0x9c26b1, 0x9d27b1, 0x9c26b1, 0x9c27b1, 0x9c26b1, 0x9d26b0, 0x9c26b0, 0x9d27b1, 
0x9d26b0, 0x9c27b1, 0x9c26b0, 0x9c26b0, 0x9c27b1, 0x9d26b1, 0x9c27b0, 0x9c26b1, 
0x010000, 0x9c26b0, 0x000000, 0x9c26b1, 0x000000, 0x9c27b0, 0x010100, 0x9c27b1
};

const long ghost5[] PROGMEM =
{
0x010000, 0x000101, 0x0c46a0, 0x0d47a0, 0x0c46a1, 0x0d46a1, 0x010101, 0x000001, 
0x000001, 0x0c47a0, 0xfefeff, 0x0c47a0, 0x0c46a1, 0xfffeff, 0x0c47a0, 0x010001, 
0x0c47a0, 0x0c46a0, 0xfefefe, 0x0d46a0, 0x0c46a0, 0xfffffe, 0x0d46a1, 0x0c47a0, 
0x0c47a1, 0x0d46a0, 0x0d46a0, 0x0d47a1, 0x0c46a1, 0x0d46a0, 0x0d46a1, 0x0d46a1, 
0x0d46a1, 0x0c47a1, 0xfffefe, 0x0d46a0, 0xfefefe, 0x0d47a0, 0xfffffe, 0x0c47a0, 
0x0d47a0, 0x0c46a0, 0xfeffff, 0x0c47a0, 0xfffeff, 0x0d46a1, 0xfffeff, 0x0c46a1, 
0x0d47a1, 0x0d46a1, 0x0c47a1, 0x0c47a0, 0x0c47a1, 0x0d46a0, 0x0d47a0, 0x0c46a0, 
0x0d46a1, 0x010000, 0x0c46a1, 0x000000, 0x0c46a0, 0x000001, 0x0d47a1, 0x010101
};

const long ghost6[] PROGMEM =
{
0x010100, 0x000001, 0x0c47a1, 0x0d47a0, 0x0c46a0, 0x0d46a0, 0x010101, 0x000100, 
0x010000, 0x0d46a0, 0xfefefe, 0x0d47a1, 0x0d47a1, 0xffffff, 0x0c46a1, 0x000101, 
0x0c47a1, 0x0c47a0, 0xfeffff, 0x0c46a0, 0x0d47a0, 0xfefefe, 0x0c46a1, 0x0d46a1, 
0x0d46a0, 0x0c46a0, 0x0d46a0, 0x0c47a0, 0x0d46a1, 0x0d47a1, 0x0d47a1, 0x0d46a0, 
0x0d46a1, 0xfffefe, 0x0d47a1, 0xfefeff, 0x0d46a1, 0xfefffe, 0x0d46a0, 0x0d47a1, 
0x0d46a0, 0xfefefe, 0x0d47a0, 0xfefffe, 0x0c47a0, 0xfefeff, 0x0c47a0, 0x0d47a0, 
0x0c47a0, 0x0c47a1, 0x0c47a0, 0x0c46a0, 0x0c46a1, 0x0d47a1, 0x0d47a0, 0x0c46a0, 
0x000001, 0x0d46a1, 0x000101, 0x0d47a0, 0x010100, 0x0d47a0, 0x010100, 0x0c47a1
};

const long dog1[] PROGMEM =
{
0x010101, 0x000001, 0x000001, 0x010100, 0xdc2c00, 0x000100, 0xdd2c01, 0x010000, 
0x000101, 0xdd2d01, 0x000001, 0xdd2c00, 0x000101, 0x000100, 0x000000, 0x010101, 
0x000001, 0x000001, 0x010001, 0x010000, 0xdd2d00, 0xfffeff, 0xdc2d00, 0x000001, 
0xdd2d01, 0x000101, 0xfffffe, 0x000001, 0xdc2c01, 0x000101, 0x010000, 0xfefefe, 
0xdc2d01, 0xdc2c01, 0xdc2d00, 0xfffeff, 0xfefeff, 0x000001, 0xfffeff, 0xffffff, 
0x000000, 0xfefffe, 0xe91e62, 0xfffefe, 0xdd2d01, 0xdc2d01, 0xdd2d01, 0xdd2d00, 
0xdd2d00, 0xfffefe, 0xfefffe, 0xdd2c00, 0xdd2d01, 0xfeffff, 0xdd2c00, 0x010001, 
0x010000, 0xdc2d00, 0x000001, 0xdc2d01, 0x010100, 0xdc2d00, 0x000101, 0xdd2c01
};

const long dog2[] PROGMEM =
{
0x010100, 0x000000, 0x010001, 0x010000, 0x000000, 0x010001, 0x000001, 0x010001, 
0xdd2d00, 0xdc2d01, 0x000101, 0xdd2d01, 0xdc2c01, 0x000001, 0x000000, 0x010000, 
0x010001, 0x000000, 0x000000, 0x000101, 0xdd2c01, 0xfefffe, 0xdd2d00, 0x010101, 
0xdc2d00, 0x010001, 0xfffefe, 0x010001, 0xdc2c00, 0x010001, 0x010001, 0xfffefe, 
0xdd2c01, 0xdd2c01, 0xdd2c01, 0xfefeff, 0xfffefe, 0x010101, 0xfffefe, 0xfefeff, 
0x010100, 0xfffffe, 0xfefffe, 0xfeffff, 0xdc2c00, 0xdc2d00, 0xdd2c00, 0xdd2c01, 
0xdd2c00, 0xffffff, 0xfefeff, 0xdc2d00, 0xdd2c01, 0xfefeff, 0xdc2d01, 0x000101, 
0x000000, 0xdd2d01, 0x010000, 0xdd2d00, 0x010100, 0xdd2d01, 0x010101, 0xdc2c00
};


void setup() { 
FastLED.addLeds<WS2811,DATA_PIN>(leds, NUM_LEDS);  
FastLED.setBrightness(50);
}
 

void fadeall() { for(int i = 0; i < NUM_LEDS; i++) { leds[i].nscale8(250); } } //SWEEP

void loop() { 
/////////////////////////////////////////////////////////////////////////////////////


for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(pacman1[i]));  // Read array from Flash
  }

FastLED.show();
delay(350);


// Put pacman2 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(pacman2[i]));
  }

FastLED.show();
delay(350);

}

//////////////////////////////////////////////////////////////////////////////////////////

for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(ghost1[i]));  // Read array from Flash
  }

FastLED.show();
delay(300);


// Put ghost2 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(ghost2[i]));
  }

FastLED.show();
delay(300);

}

////////////////////////////////////////////////////////////////////////////////////////////////////

for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(ghost3[i]));  // Read array from Flash
  }

FastLED.show();
delay(300);


// Put ghost4 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(ghost4[i]));
  }

FastLED.show();
delay(300);

}
//////////////////////////////////////////////////////////////////////////////////////////////////////

for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(ghost5[i]));  // Read array from Flash
  }

FastLED.show();
delay(300);


// Put ghost6 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(ghost6[i]));
  }

FastLED.show();
delay(300);

}

////////////////////////////////////////////////////////////////////////////////////

for(int passtime = 0; passtime < 10; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(dog1[i]));  // Read array from Flash
  }

FastLED.show();
delay(400);


// Put ghost6 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(dog2[i]));
  }

FastLED.show();
delay(400);

}

////////////////////////////////////////////////////////////////////////////////////


// Swipe effect

  static uint8_t hue = 0;
  // First slide the led in one direction
  for(int i = 0; i < NUM_LEDS; i++) {
    // Set the i'th led to red 
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show(); 
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(25);
  }
  
  for(int i = (NUM_LEDS)-1; i >= 0; i--) {
    // Set the i'th led to red 
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show();
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(10);
  } 


////////////////////////////////////////////////////////////////////////////////////



// Put Spaceship1 first frame
for(int passtime = 0; passtime < 4; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Spaceship1[i]));  // Read array from Flash
  }

FastLED.show();
delay(500);



// Put Spaceship2 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Spaceship2[i]));
  }

FastLED.show();
delay(500);

}



// Swipe effect

//  static uint8_t hue = 0;
  // First slide the led in one direction
  for(int i = 0; i < NUM_LEDS; i++) {
    // Set the i'th led to red 
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show(); 
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(25);
  }
  
  for(int i = (NUM_LEDS)-1; i >= 0; i--) {
    // Set the i'th led to red 
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show();
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(10);
  } 


////////////////////////////////////////////////////////////////////////////////////

// 3 2 1 BANG
for(int passtime = 0; passtime < 1; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Number3[i]));  // Read array from Flash
  }

FastLED.show();
delay(1000);


// Put Number2 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Number2[i]));
  }

FastLED.show();
delay(1000);

// Put Number1 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Number1[i]));
  }

FastLED.show();
delay(1000);

}


///////////////////////////////////////////////////////////////////

// Put Bang0 first frame
for(int passtime = 0; passtime < 4; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Bang0[i]));
  }

FastLED.show();
delay(350);


FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Bang1[i]));
  }

FastLED.show();
delay(350);


// Put Bang2 second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Bang2[i]));
  }

FastLED.show();
delay(350);

}

// Swipe effect

  for(int i = 0; i < NUM_LEDS; i++) {
    // Set the i'th led to red 
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show(); 
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(25);
  }

  for(int i = (NUM_LEDS)-1; i >= 0; i--) {
    // Set the i'th led to red 
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show();
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(10);
  } 

////////////////////////////////////////////////////////////////////////////////////

}
